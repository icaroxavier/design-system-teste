import {
  enhanceArgTypes,
  extractComponentDescription
} from "./chunk-SEBLWZSE.js";
import "./chunk-5SMCBIFY.js";
import {
  render
} from "./chunk-P77ZS7FV.js";
import {
  createStore,
  reconcile
} from "./chunk-CSGTCZVL.js";
import {
  ErrorBoundary,
  createComponent,
  mergeProps,
  onMount
} from "./chunk-5FQ2IWDG.js";
import "./chunk-7VY4QGQV.js";
import "./chunk-P2NQ3HQW.js";
import "./chunk-HCLVSTGI.js";
import "./chunk-B7G332Q7.js";
import "./chunk-233IJQGP.js";
import "./chunk-FBIZYJL6.js";
import "./chunk-L6FURZ4B.js";
import "./chunk-S4N5V7A3.js";
import "./chunk-DNHN6S7H.js";
import "./chunk-4MHPX44B.js";
import "./chunk-RL5LYIAX.js";
import "./chunk-BFPV65T4.js";
import "./chunk-YPQYWAEB.js";
import "./chunk-MTMWNOV4.js";
import "./chunk-YOXX2XGV.js";
import "./chunk-LPBTHIOH.js";
import "./chunk-4X62SIQU.js";
import "./chunk-SXQB3ME6.js";
import "./chunk-23VF52UO.js";
import "./chunk-HXTCPQQU.js";
import "./chunk-WVPRBZJH.js";
import "./chunk-F3AOJ76Q.js";
import "./chunk-362T3ETO.js";
import "./chunk-WHGCEDEP.js";
import "./chunk-WGAPYIUP.js";

// ../../node_modules/storybook-solidjs/dist/chunk-6VA2C2EE.mjs
var [store, setStore] = createStore({});
var delay = async (ms = 20) => {
  await new Promise((resolve) => setTimeout(resolve, ms));
};
var globals;
var componentId;
var viewMode;
var remount = (force, context) => {
  let flag = false;
  if (viewMode !== context.viewMode)
    flag = true;
  if (force)
    flag = true;
  if (!Object.is(globals, context.globals))
    flag = true;
  if (componentId !== context.componentId) {
    flag = true;
    unmountAll();
  }
  if (flag === true) {
    viewMode = context.viewMode;
    globals = context.globals;
    componentId = context.componentId;
  }
  return flag;
};
var solidReactivityDecorator = (storyFn, context) => {
  let storyId = context.canvasElement.id;
  context.args = store[storyId].args;
  return storyFn(context.args, context);
};
var render2 = (_, context) => {
  const {
    id,
    component: Component
  } = context;
  if (!Component) {
    throw new Error(`Unable to render story ${id} as the component annotation is missing from the default export`);
  }
  return createComponent(Component, mergeProps(() => context.args));
};
var disposeAllStories = () => {
  Object.keys(store).forEach((storyId) => {
    var _a, _b;
    (_b = (_a = store[storyId]) == null ? void 0 : _a.disposeFn) == null ? void 0 : _b.call(_a);
  });
};
var cleanStore = () => {
  setStore(reconcile({}));
};
var unmountAll = () => {
  disposeAllStories();
  cleanStore();
};
var cleanStoryStore = (storeId) => {
  setStore({
    [storeId]: {
      args: {},
      rendered: false,
      disposeFn: () => {
      }
    }
  });
};
var disposeStory = (storeId) => {
  var _a, _b;
  (_b = (_a = store[storeId]) == null ? void 0 : _a.disposeFn) == null ? void 0 : _b.call(_a);
};
var remountStory = (storyId) => {
  disposeStory(storyId);
  cleanStoryStore(storyId);
};
var storyIsRendered = (storyId) => {
  var _a;
  return Boolean((_a = store[storyId]) == null ? void 0 : _a.rendered);
};
var isDocsMode = (context) => context.viewMode === "docs";
var renderSolidApp = (storyId, renderContext, canvasElement) => {
  const {
    storyContext,
    unboundStoryFn,
    showMain,
    showException
  } = renderContext;
  setStore(storyId, "rendered", true);
  const App = () => {
    const Story = unboundStoryFn;
    onMount(() => {
      showMain();
    });
    return createComponent(ErrorBoundary, {
      fallback: (err) => {
        showException(err);
        return err;
      },
      get children() {
        return createComponent(Story, storyContext);
      }
    });
  };
  return render(() => createComponent(App, {}), canvasElement);
};
async function renderToCanvas(renderContext, canvasElement) {
  const {
    storyContext
  } = renderContext;
  let forceRemount = renderContext.forceRemount;
  let storyId = storyContext.canvasElement.id;
  if (viewMode === void 0)
    viewMode = storyContext.viewMode;
  if (globals === void 0)
    globals = storyContext.globals;
  if (componentId === void 0)
    componentId = storyContext.componentId;
  if (remount(forceRemount, storyContext)) {
    remountStory(storyId);
  }
  setStore(storyId, "args", storyContext.args);
  if (storyIsRendered(storyId) === false) {
    if (isDocsMode(storyContext))
      await delay();
    const disposeFn = renderSolidApp(storyId, renderContext, canvasElement);
    setStore(storyId, (prev) => ({
      ...prev,
      disposeFn
    }));
  }
}

// ../../node_modules/storybook-solidjs/dist/config.mjs
var jsxDecorator = (storyFn, _) => {
  const story = storyFn();
  return story;
};
var decorators = [jsxDecorator];
var parameters = {
  docs: {
    story: { inline: true },
    extractComponentDescription
  }
};
var argTypesEnhancers = [enhanceArgTypes];
var allDecorators = [solidReactivityDecorator, ...decorators];
var applyDecorators = (storyFn, decorators2) => {
  return decorators2.reduce(
    (decoratedStoryFn, decorator) => (context) => {
      return decorator(() => decoratedStoryFn(context), context);
    },
    (context) => storyFn(context)
  );
};
var parameters2 = { renderer: "solid", ...parameters };
export {
  applyDecorators,
  argTypesEnhancers,
  allDecorators as decorators,
  parameters2 as parameters,
  render2 as render,
  renderToCanvas
};
//# sourceMappingURL=storybook-solidjs_preview.js.map
